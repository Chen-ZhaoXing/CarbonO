{"ast":null,"code":"'use strict';\n\nconst {\n  BalancedPoolMissingUpstreamError,\n  InvalidArgumentError\n} = require('./core/errors');\n\nconst {\n  PoolBase,\n  kClients,\n  kNeedDrain,\n  kAddClient,\n  kRemoveClient,\n  kGetDispatcher\n} = require('./pool-base');\n\nconst Pool = require('./pool');\n\nconst {\n  kUrl\n} = require('./core/symbols');\n\nconst {\n  parseOrigin\n} = require('./core/util');\n\nconst kFactory = Symbol('factory');\nconst kOptions = Symbol('options');\nconst kGreatestCommonDivisor = Symbol('kGreatestCommonDivisor');\nconst kCurrentWeight = Symbol('kCurrentWeight');\nconst kIndex = Symbol('kIndex');\nconst kWeight = Symbol('kWeight');\nconst kMaxWeightPerServer = Symbol('kMaxWeightPerServer');\nconst kErrorPenalty = Symbol('kErrorPenalty');\n\nfunction getGreatestCommonDivisor(a, b) {\n  if (b === 0) return a;\n  return getGreatestCommonDivisor(b, a % b);\n}\n\nfunction defaultFactory(origin, opts) {\n  return new Pool(origin, opts);\n}\n\nclass BalancedPool extends PoolBase {\n  constructor() {\n    let upstreams = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    let {\n      factory = defaultFactory,\n      ...opts\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    super();\n    this[kOptions] = opts;\n    this[kIndex] = -1;\n    this[kCurrentWeight] = 0;\n    this[kMaxWeightPerServer] = this[kOptions].maxWeightPerServer || 100;\n    this[kErrorPenalty] = this[kOptions].errorPenalty || 15;\n\n    if (!Array.isArray(upstreams)) {\n      upstreams = [upstreams];\n    }\n\n    if (typeof factory !== 'function') {\n      throw new InvalidArgumentError('factory must be a function.');\n    }\n\n    this[kFactory] = factory;\n\n    for (const upstream of upstreams) {\n      this.addUpstream(upstream);\n    }\n\n    this._updateBalancedPoolStats();\n  }\n\n  addUpstream(upstream) {\n    var _this = this;\n\n    const upstreamOrigin = parseOrigin(upstream).origin;\n\n    if (this[kClients].find(pool => pool[kUrl].origin === upstreamOrigin && pool.closed !== true && pool.destroyed !== true)) {\n      return this;\n    }\n\n    const pool = this[kFactory](upstreamOrigin, Object.assign({}, this[kOptions]));\n    this[kAddClient](pool);\n    pool.on('connect', () => {\n      pool[kWeight] = Math.min(this[kMaxWeightPerServer], pool[kWeight] + this[kErrorPenalty]);\n    });\n    pool.on('connectionError', () => {\n      pool[kWeight] = Math.max(1, pool[kWeight] - this[kErrorPenalty]);\n\n      this._updateBalancedPoolStats();\n    });\n    pool.on('disconnect', function () {\n      const err = arguments.length <= 2 ? undefined : arguments[2];\n\n      if (err && err.code === 'UND_ERR_SOCKET') {\n        // decrease the weight of the pool.\n        pool[kWeight] = Math.max(1, pool[kWeight] - _this[kErrorPenalty]);\n\n        _this._updateBalancedPoolStats();\n      }\n    });\n\n    for (const client of this[kClients]) {\n      client[kWeight] = this[kMaxWeightPerServer];\n    }\n\n    this._updateBalancedPoolStats();\n\n    return this;\n  }\n\n  _updateBalancedPoolStats() {\n    this[kGreatestCommonDivisor] = this[kClients].map(p => p[kWeight]).reduce(getGreatestCommonDivisor, 0);\n  }\n\n  removeUpstream(upstream) {\n    const upstreamOrigin = parseOrigin(upstream).origin;\n    const pool = this[kClients].find(pool => pool[kUrl].origin === upstreamOrigin && pool.closed !== true && pool.destroyed !== true);\n\n    if (pool) {\n      this[kRemoveClient](pool);\n    }\n\n    return this;\n  }\n\n  get upstreams() {\n    return this[kClients].filter(dispatcher => dispatcher.closed !== true && dispatcher.destroyed !== true).map(p => p[kUrl].origin);\n  }\n\n  [kGetDispatcher]() {\n    // We validate that pools is greater than 0,\n    // otherwise we would have to wait until an upstream\n    // is added, which might never happen.\n    if (this[kClients].length === 0) {\n      throw new BalancedPoolMissingUpstreamError();\n    }\n\n    const dispatcher = this[kClients].find(dispatcher => !dispatcher[kNeedDrain] && dispatcher.closed !== true && dispatcher.destroyed !== true);\n\n    if (!dispatcher) {\n      return;\n    }\n\n    const allClientsBusy = this[kClients].map(pool => pool[kNeedDrain]).reduce((a, b) => a && b, true);\n\n    if (allClientsBusy) {\n      return;\n    }\n\n    let counter = 0;\n    let maxWeightIndex = this[kClients].findIndex(pool => !pool[kNeedDrain]);\n\n    while (counter++ < this[kClients].length) {\n      this[kIndex] = (this[kIndex] + 1) % this[kClients].length;\n      const pool = this[kClients][this[kIndex]]; // find pool index with the largest weight\n\n      if (pool[kWeight] > this[kClients][maxWeightIndex][kWeight] && !pool[kNeedDrain]) {\n        maxWeightIndex = this[kIndex];\n      } // decrease the current weight every `this[kClients].length`.\n\n\n      if (this[kIndex] === 0) {\n        // Set the current weight to the next lower weight.\n        this[kCurrentWeight] = this[kCurrentWeight] - this[kGreatestCommonDivisor];\n\n        if (this[kCurrentWeight] <= 0) {\n          this[kCurrentWeight] = this[kMaxWeightPerServer];\n        }\n      }\n\n      if (pool[kWeight] >= this[kCurrentWeight] && !pool[kNeedDrain]) {\n        return pool;\n      }\n    }\n\n    this[kCurrentWeight] = this[kClients][maxWeightIndex][kWeight];\n    this[kIndex] = maxWeightIndex;\n    return this[kClients][maxWeightIndex];\n  }\n\n}\n\nmodule.exports = BalancedPool;","map":{"version":3,"names":["BalancedPoolMissingUpstreamError","InvalidArgumentError","require","PoolBase","kClients","kNeedDrain","kAddClient","kRemoveClient","kGetDispatcher","Pool","kUrl","parseOrigin","kFactory","Symbol","kOptions","kGreatestCommonDivisor","kCurrentWeight","kIndex","kWeight","kMaxWeightPerServer","kErrorPenalty","getGreatestCommonDivisor","a","b","defaultFactory","origin","opts","BalancedPool","constructor","upstreams","factory","maxWeightPerServer","errorPenalty","Array","isArray","upstream","addUpstream","_updateBalancedPoolStats","upstreamOrigin","find","pool","closed","destroyed","Object","assign","on","Math","min","max","err","code","client","map","p","reduce","removeUpstream","filter","dispatcher","length","allClientsBusy","counter","maxWeightIndex","findIndex","module","exports"],"sources":["/Users/noviaantony/Desktop/CS203-Team-2/carbonO_frontend/node_modules/undici/lib/balanced-pool.js"],"sourcesContent":["'use strict'\n\nconst {\n  BalancedPoolMissingUpstreamError,\n  InvalidArgumentError\n} = require('./core/errors')\nconst {\n  PoolBase,\n  kClients,\n  kNeedDrain,\n  kAddClient,\n  kRemoveClient,\n  kGetDispatcher\n} = require('./pool-base')\nconst Pool = require('./pool')\nconst { kUrl } = require('./core/symbols')\nconst { parseOrigin } = require('./core/util')\nconst kFactory = Symbol('factory')\n\nconst kOptions = Symbol('options')\nconst kGreatestCommonDivisor = Symbol('kGreatestCommonDivisor')\nconst kCurrentWeight = Symbol('kCurrentWeight')\nconst kIndex = Symbol('kIndex')\nconst kWeight = Symbol('kWeight')\nconst kMaxWeightPerServer = Symbol('kMaxWeightPerServer')\nconst kErrorPenalty = Symbol('kErrorPenalty')\n\nfunction getGreatestCommonDivisor (a, b) {\n  if (b === 0) return a\n  return getGreatestCommonDivisor(b, a % b)\n}\n\nfunction defaultFactory (origin, opts) {\n  return new Pool(origin, opts)\n}\n\nclass BalancedPool extends PoolBase {\n  constructor (upstreams = [], { factory = defaultFactory, ...opts } = {}) {\n    super()\n\n    this[kOptions] = opts\n    this[kIndex] = -1\n    this[kCurrentWeight] = 0\n\n    this[kMaxWeightPerServer] = this[kOptions].maxWeightPerServer || 100\n    this[kErrorPenalty] = this[kOptions].errorPenalty || 15\n\n    if (!Array.isArray(upstreams)) {\n      upstreams = [upstreams]\n    }\n\n    if (typeof factory !== 'function') {\n      throw new InvalidArgumentError('factory must be a function.')\n    }\n\n    this[kFactory] = factory\n\n    for (const upstream of upstreams) {\n      this.addUpstream(upstream)\n    }\n    this._updateBalancedPoolStats()\n  }\n\n  addUpstream (upstream) {\n    const upstreamOrigin = parseOrigin(upstream).origin\n\n    if (this[kClients].find((pool) => (\n      pool[kUrl].origin === upstreamOrigin &&\n      pool.closed !== true &&\n      pool.destroyed !== true\n    ))) {\n      return this\n    }\n    const pool = this[kFactory](upstreamOrigin, Object.assign({}, this[kOptions]))\n\n    this[kAddClient](pool)\n    pool.on('connect', () => {\n      pool[kWeight] = Math.min(this[kMaxWeightPerServer], pool[kWeight] + this[kErrorPenalty])\n    })\n\n    pool.on('connectionError', () => {\n      pool[kWeight] = Math.max(1, pool[kWeight] - this[kErrorPenalty])\n      this._updateBalancedPoolStats()\n    })\n\n    pool.on('disconnect', (...args) => {\n      const err = args[2]\n      if (err && err.code === 'UND_ERR_SOCKET') {\n        // decrease the weight of the pool.\n        pool[kWeight] = Math.max(1, pool[kWeight] - this[kErrorPenalty])\n        this._updateBalancedPoolStats()\n      }\n    })\n\n    for (const client of this[kClients]) {\n      client[kWeight] = this[kMaxWeightPerServer]\n    }\n\n    this._updateBalancedPoolStats()\n\n    return this\n  }\n\n  _updateBalancedPoolStats () {\n    this[kGreatestCommonDivisor] = this[kClients].map(p => p[kWeight]).reduce(getGreatestCommonDivisor, 0)\n  }\n\n  removeUpstream (upstream) {\n    const upstreamOrigin = parseOrigin(upstream).origin\n\n    const pool = this[kClients].find((pool) => (\n      pool[kUrl].origin === upstreamOrigin &&\n      pool.closed !== true &&\n      pool.destroyed !== true\n    ))\n\n    if (pool) {\n      this[kRemoveClient](pool)\n    }\n\n    return this\n  }\n\n  get upstreams () {\n    return this[kClients]\n      .filter(dispatcher => dispatcher.closed !== true && dispatcher.destroyed !== true)\n      .map((p) => p[kUrl].origin)\n  }\n\n  [kGetDispatcher] () {\n    // We validate that pools is greater than 0,\n    // otherwise we would have to wait until an upstream\n    // is added, which might never happen.\n    if (this[kClients].length === 0) {\n      throw new BalancedPoolMissingUpstreamError()\n    }\n\n    const dispatcher = this[kClients].find(dispatcher => (\n      !dispatcher[kNeedDrain] &&\n      dispatcher.closed !== true &&\n      dispatcher.destroyed !== true\n    ))\n\n    if (!dispatcher) {\n      return\n    }\n\n    const allClientsBusy = this[kClients].map(pool => pool[kNeedDrain]).reduce((a, b) => a && b, true)\n\n    if (allClientsBusy) {\n      return\n    }\n\n    let counter = 0\n\n    let maxWeightIndex = this[kClients].findIndex(pool => !pool[kNeedDrain])\n\n    while (counter++ < this[kClients].length) {\n      this[kIndex] = (this[kIndex] + 1) % this[kClients].length\n      const pool = this[kClients][this[kIndex]]\n\n      // find pool index with the largest weight\n      if (pool[kWeight] > this[kClients][maxWeightIndex][kWeight] && !pool[kNeedDrain]) {\n        maxWeightIndex = this[kIndex]\n      }\n\n      // decrease the current weight every `this[kClients].length`.\n      if (this[kIndex] === 0) {\n        // Set the current weight to the next lower weight.\n        this[kCurrentWeight] = this[kCurrentWeight] - this[kGreatestCommonDivisor]\n\n        if (this[kCurrentWeight] <= 0) {\n          this[kCurrentWeight] = this[kMaxWeightPerServer]\n        }\n      }\n      if (pool[kWeight] >= this[kCurrentWeight] && (!pool[kNeedDrain])) {\n        return pool\n      }\n    }\n\n    this[kCurrentWeight] = this[kClients][maxWeightIndex][kWeight]\n    this[kIndex] = maxWeightIndex\n    return this[kClients][maxWeightIndex]\n  }\n}\n\nmodule.exports = BalancedPool\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}