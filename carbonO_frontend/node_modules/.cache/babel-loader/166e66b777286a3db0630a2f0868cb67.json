{"ast":null,"code":"\"use strict\";\n\nconst fs = require(\"fs-extra\"); // const request = require(\"request\");\n\n\nconst path = require(\"path\");\n\nconst mimeTypes = require(\"mime-types\");\n\nconst {\n  request\n} = require(\"undici\");\n\nfunction decode(dataURI) {\n  if (!/data:image\\//.test(dataURI)) {\n    console.log('ImageDataURI :: Error :: It seems that it is not an Image Data URI. Couldn\\'t match \"data:image/\"');\n    return null;\n  }\n\n  let regExMatches = dataURI.match(\"data:(image/.*);base64,(.*)\");\n  return {\n    imageType: regExMatches[1],\n    dataBase64: regExMatches[2],\n    dataBuffer: Buffer.from(regExMatches[2], \"base64\")\n  };\n}\n\nfunction encode(data, mediaType) {\n  if (!data || !mediaType) {\n    console.log(\"ImageDataURI :: Error :: Missing some of the required params: data, mediaType \");\n    return null;\n  }\n\n  mediaType = /\\//.test(mediaType) ? mediaType : \"image/\" + mediaType;\n  let dataBase64 = Buffer.isBuffer(data) ? data.toString(\"base64\") : Buffer.from(data).toString(\"base64\");\n  let dataImgBase64 = \"data:\" + mediaType + \";base64,\" + dataBase64;\n  return dataImgBase64;\n}\n\nfunction encodeFromFile(filePath) {\n  return new Promise((resolve, reject) => {\n    if (!filePath) {\n      reject(\"ImageDataURI :: Error :: Missing some of the required params: filePath\");\n      return null;\n    }\n\n    let mediaType = mimeTypes.lookup(filePath);\n\n    if (!mediaType) {\n      reject(\"ImageDataURI :: Error :: Couldn't recognize media type for file\");\n    }\n\n    fs.readFile(filePath, (err, data) => {\n      if (err) {\n        return reject(`ImageDataURI :: Error :: ${JSON.stringify(err, null, 4)}`);\n      }\n\n      return resolve(encode(data, mediaType));\n    });\n  });\n}\n\nfunction encodeFromURL(imageURL) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return new Promise(async (resolve, reject) => {\n    if (!imageURL) {\n      reject(\"ImageDataURI :: Error :: Missing some of the required params: imageURL\");\n      return null;\n    }\n\n    const timeout = options.timeout || 3000;\n    const controller = new AbortController();\n    setTimeout(() => {\n      controller.abort();\n    }, timeout);\n    const response = await request(imageURL, {\n      signal: controller.signal\n    });\n\n    if (response.statusCode === 200) {\n      const bodyBuffer = await response.body.arrayBuffer();\n      return resolve(encode(bodyBuffer, response.headers[\"content-type\"]));\n    }\n\n    return reject(`ImageDataURI :: Error :: GET -> ${imageURL} returned an HTTP ${response.statusCode} status!`);\n  });\n}\n\nfunction outputFile(dataURI, filePath) {\n  filePath = filePath || \"./\";\n  return new Promise((resolve, reject) => {\n    let imageDecoded = decode(dataURI);\n    filePath = !!path.extname(filePath) ? filePath : filePath + \".\" + mimeTypes.extension(imageDecoded.imageType);\n    fs.outputFile(filePath, imageDecoded.dataBuffer, err => {\n      if (err) {\n        return reject(`ImageDataURI :: Error :: ${JSON.stringify(err, null, 4)}`);\n      }\n\n      resolve(filePath);\n    });\n  });\n}\n\nmodule.exports = {\n  decode,\n  encode,\n  encodeFromFile,\n  encodeFromURL,\n  outputFile\n};","map":{"version":3,"names":["fs","require","path","mimeTypes","request","decode","dataURI","test","console","log","regExMatches","match","imageType","dataBase64","dataBuffer","Buffer","from","encode","data","mediaType","isBuffer","toString","dataImgBase64","encodeFromFile","filePath","Promise","resolve","reject","lookup","readFile","err","JSON","stringify","encodeFromURL","imageURL","options","timeout","controller","AbortController","setTimeout","abort","response","signal","statusCode","bodyBuffer","body","arrayBuffer","headers","outputFile","imageDecoded","extname","extension","module","exports"],"sources":["/Users/noviaantony/Desktop/CS203-Team-2/carbonO_frontend/node_modules/@snaily-cad/image-data-uri/lib/image-data-uri.js"],"sourcesContent":["\"use strict\";\n\nconst fs = require(\"fs-extra\");\n// const request = require(\"request\");\nconst path = require(\"path\");\nconst mimeTypes = require(\"mime-types\");\nconst { request } = require(\"undici\");\n\nfunction decode(dataURI) {\n  if (!/data:image\\//.test(dataURI)) {\n    console.log(\n      'ImageDataURI :: Error :: It seems that it is not an Image Data URI. Couldn\\'t match \"data:image/\"',\n    );\n    return null;\n  }\n\n  let regExMatches = dataURI.match(\"data:(image/.*);base64,(.*)\");\n  return {\n    imageType: regExMatches[1],\n    dataBase64: regExMatches[2],\n    dataBuffer: Buffer.from(regExMatches[2], \"base64\"),\n  };\n}\n\nfunction encode(data, mediaType) {\n  if (!data || !mediaType) {\n    console.log(\"ImageDataURI :: Error :: Missing some of the required params: data, mediaType \");\n    return null;\n  }\n\n  mediaType = /\\//.test(mediaType) ? mediaType : \"image/\" + mediaType;\n  let dataBase64 = Buffer.isBuffer(data)\n    ? data.toString(\"base64\")\n    : Buffer.from(data).toString(\"base64\");\n  let dataImgBase64 = \"data:\" + mediaType + \";base64,\" + dataBase64;\n\n  return dataImgBase64;\n}\n\nfunction encodeFromFile(filePath) {\n  return new Promise((resolve, reject) => {\n    if (!filePath) {\n      reject(\"ImageDataURI :: Error :: Missing some of the required params: filePath\");\n      return null;\n    }\n\n    let mediaType = mimeTypes.lookup(filePath);\n    if (!mediaType) {\n      reject(\"ImageDataURI :: Error :: Couldn't recognize media type for file\");\n    }\n\n    fs.readFile(filePath, (err, data) => {\n      if (err) {\n        return reject(`ImageDataURI :: Error :: ${JSON.stringify(err, null, 4)}`);\n      }\n\n      return resolve(encode(data, mediaType));\n    });\n  });\n}\n\nfunction encodeFromURL(imageURL, options = {}) {\n  return new Promise(async (resolve, reject) => {\n    if (!imageURL) {\n      reject(\"ImageDataURI :: Error :: Missing some of the required params: imageURL\");\n      return null;\n    }\n\n    const timeout = options.timeout || 3000;\n    const controller = new AbortController();\n\n    setTimeout(() => {\n      controller.abort();\n    }, timeout);\n\n    const response = await request(imageURL, {\n      signal: controller.signal,\n    });\n\n    if (response.statusCode === 200) {\n      const bodyBuffer = await response.body.arrayBuffer();\n      return resolve(encode(bodyBuffer, response.headers[\"content-type\"]));\n    }\n\n    return reject(\n      `ImageDataURI :: Error :: GET -> ${imageURL} returned an HTTP ${response.statusCode} status!`,\n    );\n  });\n}\n\nfunction outputFile(dataURI, filePath) {\n  filePath = filePath || \"./\";\n  return new Promise((resolve, reject) => {\n    let imageDecoded = decode(dataURI);\n    filePath = !!path.extname(filePath)\n      ? filePath\n      : filePath + \".\" + mimeTypes.extension(imageDecoded.imageType);\n    fs.outputFile(filePath, imageDecoded.dataBuffer, (err) => {\n      if (err) {\n        return reject(`ImageDataURI :: Error :: ${JSON.stringify(err, null, 4)}`);\n      }\n\n      resolve(filePath);\n    });\n  });\n}\n\nmodule.exports = {\n  decode,\n  encode,\n  encodeFromFile,\n  encodeFromURL,\n  outputFile,\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}