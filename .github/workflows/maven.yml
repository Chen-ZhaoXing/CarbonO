# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: CarbonO CI/CD 

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest
    environment: 
      name: Production
      url: https://github.com
    steps:
#     - uses: actions/checkout@v3
#     - name: Set up JDK 18
#       uses: actions/setup-java@v3
#       with:
#         java-version: '18'
#         distribution: 'temurin'
#         cache: maven
#     - name: Login to Docker Hub
#       uses: docker/login-action@v2
#       with:
#         username: ${{ secrets.DOCKERHUB_USERNAME }}
#         password: ${{ secrets.DOCKERHUB_PASSWORD }}
#     - name: Build user with Maven and push image
#       env:
#           CARBONO_USERNAME: ${{ secrets.CARBONO_USERNAME  }}
#           CARBONO_PASSWORD: ${{ secrets.CARBONO_PASSWORD  }}
#       working-directory: ./carbonO/user
#       run: |
#         mvn clean package dockerfile:push
        
#     - name: Build userReward with Maven and push image
#       working-directory: ./carbonO/userReward
#       run: |
#         mvn clean package dockerfile:push 
        
#     - name: Build carbonTracker with Maven and push image
#       working-directory: ./carbonO/carbonTracker
#       run: |
#         mvn clean package dockerfile:push
        
      #Deploy AWS
    - name: Get Github action IP
      id: ip
      uses: haythem/public-ip@v1.2
    
    - name: AWS configure
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID  }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
        
    - name: Add github actions IP to security group
      env:
        AWS_SECURITY_GROUP: ${{ secrets.AWS_SECURITY_GROUP }}
      run: |
        aws ec2 authorize-security-group-ingress --group-id ${{ env.AWS_SECURITY_GROUP }} --protocol tcp --port 22 --cidr ${{ steps.ip.outputs.ipv4 }}/16
        sleep 10
    - name: Deploy on AWS EC2
      env:
          PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY  }}
          HOSTNAME: ${{ secrets.HOSTNAME  }}
          USER_NAME: ${{ secrets.USERNAME  }}
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      run: |
          echo "$PRIVATE_KEY" > private_key.pem && chmod 600 private_key.pem
          ssh -o StrictHostKeyChecking=no -i private_key.pem ${USER_NAME}@${HOSTNAME} '
            echo "Deployment successful"
          '
          rm -rf private_key.pem
    
    - name: Remove github actions IP from security group
      env:
        AWS_SECURITY_GROUP: ${{ secrets.AWS_SECURITY_GROUP }}
      run: |
        aws ec2 revoke-security-group-ingress --group-id ${{ env.AWS_SECURITY_GROUP }} --protocol tcp --port 22 --cidr ${{ steps.ip.outputs.ipv4 }}/16
      if: always()
